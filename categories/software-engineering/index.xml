<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Engineering on Virtual World</title>
    <link>http://www.jiaqili.me/categories/software-engineering/</link>
    <description>Recent content in Software Engineering on Virtual World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 19 Jul 2018 20:31:00 +0800</lastBuildDate>
    
	<atom:link href="http://www.jiaqili.me/categories/software-engineering/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>面向对象的设计原则和设计模式</title>
      <link>http://www.jiaqili.me/post/se-oodesign/</link>
      <pubDate>Thu, 19 Jul 2018 20:31:00 +0800</pubDate>
      
      <guid>http://www.jiaqili.me/post/se-oodesign/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文是面向对象设计的读书笔记。主要包括四部分：面向对象思想的回顾、面向对象设计尝试解决的是什么问题、面向对象设计的原则以及GoF中提到的面向对象的设计模式。主要参考了以下书目：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/li&gt;
&lt;li&gt;Head First Design Pattern&lt;/li&gt;
&lt;li&gt;Agile Software Development: Principles, Patterns, and Practices&lt;/li&gt;
&lt;li&gt;Thinking in Java, 4th Edition&lt;/li&gt;
&lt;li&gt;Core Java Volume I - Fundamentals&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;文章最初是我为单位写的Powerpoint格式的培训材料，所以内容将基本上采用bullet point的形式呈现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;面向对象编程思想回顾-java语言&#34;&gt;&lt;strong&gt;面向对象编程思想回顾(Java语言)&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&#34;oo基本要素一-抽象&#34;&gt;&lt;strong&gt;OO基本要素一：抽象&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;抽象既可以是一个过程，也可以是一个实体。抽象作为过程，尝试提取一个事物中关键的细节，同时忽略掉那些不关键的信息；抽象作为实体，是一个具体事物的外部表示。&lt;/li&gt;
&lt;li&gt;所有的程序设计都尝试建立起问题空间的问题模型（比如，一项业务）与解空间的机器模型（比如，一段程序）之间的联系，这是一种抽象过程。&lt;/li&gt;
&lt;li&gt;在面向对象的设计中，我们把问题空间中和解空间中的元素的表示都称为对象，这是抽象的实体。&lt;/li&gt;
&lt;li&gt;我们能够解决问题的复杂性取决于抽象的类型和质量。&lt;/li&gt;
&lt;li&gt;抽象有很多层级：当抽象层次提高时，我们得到的是更重要的，更少的信息；相反，当抽象层次降低时，我们将看到更多的细节。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;oo基本要素二-封装&#34;&gt;&lt;strong&gt;OO基本要素二：封装&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;封装和抽象一样，可以被看作是一个过程，也可以被看作是一个实体。封装作为一个过程，指的是将一个或多个事物包裹到一个容器里的动作；封装作为一个实体，指的是一个包含有一个或多个事物的包裹。&lt;/li&gt;
&lt;li&gt;在面向对象编程中，对象将数据和功能封装在一起，来满足某些特定的请求。这些请求由对象的接口定义（这里的接口指的是暴露给外部调用的方法）；实现这些接口的代码和隐藏的数据构成了对象的实现。&lt;/li&gt;
&lt;li&gt;封装将类变成软件的基本构件，提高了内聚性：每个类作为一个服务提供者，可以很好的完成某项任务，但又不做超出其设计范畴的工作。&lt;/li&gt;
&lt;li&gt;封装将类的实现和类的使用分开，降低了耦合性：类的设计者可以改变类的内部工作方式（实现）而不影响类的使用者使用类（接口）。为了确保使用者不接触类的实现，Java提供了访问修饰符。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;抽象-vs-封装&#34;&gt;&lt;strong&gt;抽象 vs 封装&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;抽象决定了哪些特定的信息可见，哪些特定的信息被隐藏。&lt;/li&gt;
&lt;li&gt;封装指的是将信息包裹起来，来实现特定信息的隐藏和可见。&lt;/li&gt;
&lt;li&gt;抽象关注的是事物的外部表示，封装关注的是事物的内部实现。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>