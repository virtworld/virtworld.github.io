<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Generics on Virtual World</title>
    <link>http://www.jiaqili.me/tags/generics/</link>
    <description>Recent content in Generics on Virtual World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 25 Aug 2018 00:17:11 +0800</lastBuildDate>
    
	<atom:link href="http://www.jiaqili.me/tags/generics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java基础知识系列9：泛型</title>
      <link>http://www.jiaqili.me/post/java-basics-9-generic/</link>
      <pubDate>Sat, 25 Aug 2018 00:17:11 +0800</pubDate>
      
      <guid>http://www.jiaqili.me/post/java-basics-9-generic/</guid>
      <description>&lt;h1 id=&#34;泛型概述&#34;&gt;泛型概述&lt;/h1&gt;

&lt;p&gt;泛型的代码意味着它可以被很多不同类型的对象所重用，比如ArrayList&lt;T&gt;可以用来保存任意特定类型。&lt;/p&gt;

&lt;p&gt;我们知道原生类型，保存的是Object类型（在擦除小节会讲到），当用get方法获取元素时候，需要进行强制类型转换。&lt;/p&gt;

&lt;p&gt;但是泛型提供了类型参数(即类型参数化的概念)，它希望通过解耦类或方法与所使用的类型之间的约束来使类或方法实现最广泛的表达能力。这里的T可以用来指示元素类型，比如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ArrayList &amp;lt;String &amp;gt; files = new ArrayList &amp;lt;&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当调用get的时候不再需要强制类型转换，因为编译器自动插入了合适的强制类型转换，它直接返回正确的类型，比如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String filename = files.get(0);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;泛型类&#34;&gt;泛型类&lt;/h1&gt;

&lt;p&gt;一个泛型类是具有一个或多个类型变量的类。类型变量使用大写形式，通常比较短，一般用E表示集合的元素类型，用K和V表示关键字与值的类型，T、U 和S表示任意类型。以下是一个泛型类的示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Pair &amp;lt;T&amp;gt; {
    private T first;
    private T second;
    public Pair() { first = null; second = null;}
    public Pair(T first , T second) { this.first = first; this.second = second;}
    public T getFirst() { return first;}
    public T getSecond() { return second;}
    public void setFirst(T newValue) { first = newValue;}
    public void setSecond(T newValue) { second = newValue;}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>