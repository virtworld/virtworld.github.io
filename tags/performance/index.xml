<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Performance on Virtual World</title>
    <link>http://www.jiaqili.me/tags/performance/</link>
    <description>Recent content in Performance on Virtual World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 09 Dec 2018 18:36:00 +0800</lastBuildDate>
    
	<atom:link href="http://www.jiaqili.me/tags/performance/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>故障分析报告 - Java应用PS未关闭导致的OOM错误</title>
      <link>http://www.jiaqili.me/post/oom-profiling-report-20181121/</link>
      <pubDate>Sun, 09 Dec 2018 18:36:00 +0800</pubDate>
      
      <guid>http://www.jiaqili.me/post/oom-profiling-report-20181121/</guid>
      <description>&lt;p&gt;这篇记录了2018年11月21日生产系统的一个联机交易服务应用OOM错误及排查过程。所有的包名、类名、方法名已作脱敏处理，涉及业务逻辑的代码均已删除但不影响问题分析，部分方法、调用栈栈做过简化，以方便阅读。&lt;/p&gt;

&lt;p&gt;首先，介绍一下背景。出故障的Java应用部署在四台独立的物理机上，上面通过F5做负载均衡。应用本身比较老，Java版本是1.6，Jetty作为服务器。其中两台用的是IBM的虚拟机，另外两台用的是HotSpot 64-Bit Server（这就是另一个故事了^-^）。&lt;/p&gt;

&lt;h1 id=&#34;生产分析-案发现场&#34;&gt;生产分析（案发现场）&lt;/h1&gt;

&lt;p&gt;笔者到事故现场的时候，发生OOM的一台IBM的Java虚拟机已经宕掉了，另一台HotSpot堆开地比较大(Xmx4G)还活着。&lt;code&gt;jmap&lt;/code&gt;看了下使用中的堆有3G左右，远大于平常的几百兆。&lt;code&gt;jstat -gcutil pid 1000&lt;/code&gt;观察了一会儿，主要是想看一下Full GC。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>