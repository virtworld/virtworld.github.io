<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Abstract Class on Virtual World</title>
    <link>http://www.jiaqili.me/tags/abstract-class/</link>
    <description>Recent content in Abstract Class on Virtual World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 18 Aug 2018 10:06:00 +0800</lastBuildDate>
    
	<atom:link href="http://www.jiaqili.me/tags/abstract-class/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java基础知识系列4：抽象类和接口</title>
      <link>http://www.jiaqili.me/post/java-basics-4-interface/</link>
      <pubDate>Sat, 18 Aug 2018 10:06:00 +0800</pubDate>
      
      <guid>http://www.jiaqili.me/post/java-basics-4-interface/</guid>
      <description>&lt;h1 id=&#34;抽象类和抽象方法&#34;&gt;抽象类和抽象方法&lt;/h1&gt;

&lt;p&gt;包含抽象方法的类被称做抽象类。如果一个类包含一个或多个抽象方法，它必需被定义为抽象类。&lt;/p&gt;

&lt;p&gt;抽象类可以包含具体的数据和具体的方法。抽象类不能实例化，不过可以有一个抽象类的对象变量，但是它只能引用非抽象子类对象。如果从一个抽象类继承，要么实现它所有的抽象方法，要么继承的类也是个抽象类。&lt;/p&gt;

&lt;p&gt;我们也可以创建一个没有任何抽象方法的抽象类，比如用于阻止该类的实例化。&lt;/p&gt;

&lt;p&gt;抽象类的优点是我们可以明确告诉用户哪些方法需要由子类实现，并且可以很容易地将公共方法沿着层次向上移动；抽象类也有限制，Java不允许多重继承，也就是一个类只能扩展于一个类，而每个类可以扩展自多个接口。&lt;/p&gt;

&lt;p&gt;Java不提供多重继承而使用接口来实现类似多重继承的好处在于，避免多重继承的复杂性和低效性。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>