<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Batch on Virtual World</title>
    <link>http://www.jiaqili.me/tags/batch/</link>
    <description>Recent content in Batch on Virtual World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 21 Feb 2018 20:09:00 +0800</lastBuildDate>
    
	<atom:link href="http://www.jiaqili.me/tags/batch/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用Oracle交换分区实现快速数据换入/换出</title>
      <link>http://www.jiaqili.me/post/oracle-exchange-partition-chn/</link>
      <pubDate>Wed, 21 Feb 2018 20:09:00 +0800</pubDate>
      
      <guid>http://www.jiaqili.me/post/oracle-exchange-partition-chn/</guid>
      <description>&lt;p&gt;对于一些系统的晚间批处理来讲，首先需要从上游系统获取数据，然后进行批处理运算，最后（可能）再准备数据给下游系统。而一个系统内部通常只保留一定时间段的数据，对于“过期的”数据要么放入仓库，要么归档备份。这个涉及到大量数据一进一出的过程，称为“滑动窗口”(sliding window)。&lt;/p&gt;

&lt;p&gt;对于这类需要按天或者按月批量进出数据的表，一般按照日期字段分区。Oracle里常用Range或者List分区表，然后建立本地索引(local index)。对于“过期的”数据只需要：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER TABLE partitioned_table DROP PARTITION partition_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而对于换入数据的过程来讲，如果有很多索引的话，插入操作会很慢。有同事做过对比，禁用索引（或者删除索引）后插入数据再重建索引会比正常插入要快一点。首先，将表的所有索引置为不可用：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER INDEX index_name UNUSABLE;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后用SQLLDR加载数据到新的分区里，然后重建索引：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER INDEX index_name REBUILD;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是如果分区很多，索引重建过程会变成一个噩梦。而且没有索引期间数据是不可用的。&lt;/p&gt;

&lt;p&gt;这时候其实可以用到Oracle的交换分区的功能。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一次Java批处理程序的性能调优</title>
      <link>http://www.jiaqili.me/post/java-tuning-batch/</link>
      <pubDate>Fri, 26 Jan 2018 11:33:00 +0800</pubDate>
      
      <guid>http://www.jiaqili.me/post/java-tuning-batch/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文记录的是一次对某系统的批处理应用程序的调优过程。主要涉及统计信息收集、代码分析调优、JVM调优以及从单机批处理向多机的拆分过程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;批处理模式&#34;&gt;&lt;strong&gt;批处理模式&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;不论需要处理的业务逻辑如何，大部分批处理程序（也包括我们要讨论的）都遵照一种通用的编程模型。虽然不同的公司内部可能对批处理的各种术语有不同的表述，但为了描述清晰，
下文将采用&lt;a rel=&#34;JSR-352&#34; href=&#34;https://www.jcp.org/en/jsr/detail?id=352&#34;&gt;&lt;code&gt;JSR-352&lt;/code&gt;&lt;/a&gt;标准定义的批处理领域语言(Domain Language)。下面我们会对一些基本概念做简略描述。&lt;/p&gt;


&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://www.jiaqili.me/images/java-batch-performance-tuning-chn/batch_model.png&#34; alt=&#34;批处理程序模型&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;批处理程序模型&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;如上图所示，我们的批处理程序包含多个作业(Job)，一个作业又包含多个步骤(Step)，一个步骤内部的执行逻辑遵循经典的读取、处理和写入模式。
我们称一个正在运行的批处理程序为批处理实例(Batch Instance)， 同样的有作业实例(Job Instance)和步骤实例(Step Instance)。
不同的批处理会定时运行，根据运行时间点和频率分为日终(End-of-Day)和月末(End-of-Month)批处理。
我们称批处理时间和业务数据时间挂钩，而非日历时间。比如，一个在2018年1月15日03:00am开始运行的批处理，它处理的是2018年1月14日产生的数据，那么我们称它为2018/01/14日终批处理实例。
批处理虽然是非实时数据处理，但是也有需要在XX时间段内完成的要求，这通常是因为要满足为下游系统提供数据的要求。&lt;/p&gt;

&lt;p&gt;作业以及其步骤的执行规则一般定义在XML或者数据库中。首先，我们来看一个作业的内部。
一个作业的正常执行步骤通常有先后逻辑关系，所以一般是串行地按顺序执行(&lt;code&gt;Step1-&amp;gt;Step2-&amp;gt;Step3-&amp;gt;END&lt;/code&gt;)。
但在一个步骤失败的情况下，可以采用不同的策略：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;尝试重复执行该步骤，并在重复指定次数仍失败后改用其他策略(&lt;code&gt;Step1-&amp;gt;Step1&#39;-&amp;gt;Step1&#39;&#39;...&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;跳过该步骤，继续执行下一个步骤(&lt;code&gt;Step1-&amp;gt;Step3-&amp;gt;END&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;终止作业(&lt;code&gt;Step1-&amp;gt;END&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;进入条件分支(&lt;code&gt;Step1-&amp;gt;Step4-&amp;gt;Step5-&amp;gt;END&lt;/code&gt;)， 如下图。&lt;/li&gt;
&lt;/ul&gt;


&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://www.jiaqili.me/images/java-batch-performance-tuning-chn/batch_branch.png&#34; alt=&#34;作业内步骤的条件分支&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;作业内步骤的条件分支&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;接着，我们再来看作业间的关系。作业可以作业一个步骤嵌套在另一个作业中，多个相互独立的作业也可以并行执行。如下图：&lt;/p&gt;


&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://www.jiaqili.me/images/java-batch-performance-tuning-chn/batch_jobs.png&#34; alt=&#34;作业嵌套和并行执行&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;作业嵌套和并行执行&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>