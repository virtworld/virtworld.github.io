<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grabage Collection on Virtual World</title>
    <link>http://www.jiaqili.me/tags/grabage-collection/</link>
    <description>Recent content in Grabage Collection on Virtual World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 21 Jun 2018 08:48:42 +0000</lastBuildDate>
    
	<atom:link href="http://www.jiaqili.me/tags/grabage-collection/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>垃圾回收算法（一）：基本回收算法</title>
      <link>http://www.jiaqili.me/post/jvm-gc-basics/</link>
      <pubDate>Thu, 21 Jun 2018 08:48:42 +0000</pubDate>
      
      <guid>http://www.jiaqili.me/post/jvm-gc-basics/</guid>
      <description>&lt;h1 id=&#34;1-自动内存管理&#34;&gt;&lt;strong&gt;1 自动内存管理&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;大多数编程语言都使用动态内存分配来允许进程在运行时为编译期间无法确定大小的对象分配和释放内存。通过动态分配的对象存放在堆(heap)中。因为内存空间有限，所以动态分配的内存空间必须在不再需要的时候被释放：要么让程序员去做这个工作，显式地释放内存，比如C++和C语言的delete和free函数；要么使用一个垃圾回收器负责这个事情。&lt;/p&gt;

&lt;p&gt;显式地释放内存存在两方面的问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;释放了还在使用的内存会导致悬挂指针(dangling pointer)问题，即指针指向的内存空间可能已经挪作他用，继续使用这块内存可能导致不可预料的结果；&lt;/li&gt;
&lt;li&gt;没有释放不再使用的内存，可能会导致内存泄漏(memory leak)问题&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;自动内存管理系统可以解决大部分上述问题，它的三个任务是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;为新对象分配空间；&lt;/li&gt;
&lt;li&gt;确定存货对象；&lt;/li&gt;
&lt;li&gt;回收死亡对象所占用的空间。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;自动内存管理引入&lt;code&gt;垃圾&lt;/code&gt;这个概念来近似地判断对象是否存活：只有当堆中存在一条从根(下文介绍)出发的指针链能最终到达某个对象的时候，这个对象才是存活，其他的对象被认定为垃圾，回收机制会把这些不可达对象回收。这个判断结果中的存活对象可能包含永远不会再被访问的对象，但是被认为是垃圾的对象必定是死亡的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>